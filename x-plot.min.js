var t=new CSSStyleSheet;t.replaceSync("\n  :host([autoresize]) {\n    display: inline-flex;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n  }\n\n  :host([autoresize]) canvas {\n    width: 100% !important;\n    height: 100% !important;\n  }\n");var e=class extends HTMLElement{static get observedAttributes(){return["width","height","background","color","zoom","autoresize","pixel-ratio","line-width"]}state={pixelRatio:window.devicePixelRatio,data:[],zoom:1,autoresize:!1,lineWidth:1,background:"#235",color:"#4f4"};canvas=document.createElement("canvas");context=this.canvas.getContext("2d",{alpha:!1,desynchronized:!0});constructor(){super();const e=this.attachShadow({mode:"open"});e.adoptedStyleSheets=[t],e.appendChild(this.canvas),this.addEventListener("wheel",(t=>{const e=+this.state.zoom-6e-4*Math.min(50,this.state.zoom**1.15)*t.deltaY;this.setAttribute("zoom",""+e)}),{passive:!0}),this.addEventListener("wheel",(t=>t.preventDefault()),{passive:!1})}set data(t){this.state.data=t,this.draw()}draw(){this.context.fillStyle=this.state.background,this.context.fillRect(0,0,this.canvas.width,this.canvas.height),(({context:t,width:e=t.canvas.width,height:i=t.canvas.height,pixelRatio:a=window.devicePixelRatio,lineWidth:s=1,zoom:n=1,color:h="#fff",data:o=[],fn:d=(t=>o[0|t]??o[o.length-1])})=>{t.save(),t.lineWidth=s*a,t.lineJoin="round",t.strokeStyle=h;const l=s*a+a,c=.5*l,r=.5*e+.75*c,v=i-l,p=Math.max(1e-5,2*n/Math.max(1,o.length-1));if(!isFinite(p))return;const w=2/(e*a),x=o.length/(e*a);let g=0,u=0,m=0,f=-1*n;const z=t=>{u=(f+1)*r-c,m=(1-.5*(t+1))*v+c};for(z(d(0)),t.beginPath(),t.moveTo(u,m),f=-1;f<=1;f+=w)z(d(g++*x/n)),t.lineTo(u,m);z(d(g++)),t.lineTo(u,m),t.lineTo(u,m),t.stroke(),t.restore()})({context:this.context,...this.state})}attributeChangedCallback(t,e,i){switch(t){case"width":this.canvas.width=+i*this.state.pixelRatio,this.canvas.style.width=i+"px";break;case"height":this.canvas.height=+i*this.state.pixelRatio,this.canvas.style.height=i+"px";break;case"zoom":if(!isFinite(+i))return;i<1&&(i=1),i>1e5&&(i=1e5);default:const e=t.replace(/-[a-z]/g,(t=>t[1].toUpperCase()));this.state[e]=i}this.draw()}},i=e;export{e as Plot,i as default};